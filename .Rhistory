skip()
skip()
skip()
skip()
skip()
my_sqrt
skip()
skip()
skip()
skip()
skip()
skip()
library(datasets) hist(warpbreaks$breaks, breaks=20, xlab = "Breaks", main="Number Breaks in Yarn during Weaving", ylim = c(0,20)
library(datasets)
ls
library(datasets) hist(warpbreaks$breaks, breaks=20, xlab = "Breaks", main="Number Breaks in Yarn during Weaving", ylim = c(0,20))
library("MASS") data("cats") plot(cats$Bwt, cats$Hwt, type="l", col="red", lwd=1, ylab="Heart weight (Kg)", xlab="Body weight (Kg)", main="Anatomical features of house cats") fit1<-lm(formula= cats$Hwt ~ cats$Bwt) abline(fit1, lty="dashed") #sample of text to be placed in plot text(x=2.3, y=18, labels="R2=0.896\n P=2615e-15")
library(datasets) hist(warpbreaks$breaks, breaks=20, xlab = "Breaks", main="Number Breaks in Yarn during Weaving", ylim = c(0,20))
library("MASS")
data("cats")
plot(cats$Bwt, cats$Hwt,
type="l",
col="red",
lwd=1,
ylab="Heart weight (Kg)",
xlab="Body weight (Kg)",
main="Anatomical features of house cats")
fit1<-lm(formula= cats$Hwt~ cats$Bwt)
abline(fit1, lty="dashed")
#sample of text to be placed in plot
text(x=2.3, y=18, labels="R2=0.896\n P=2615e-15")
library(lattice)
library(datasets)
#boxplotSepal.Lengthby Species
bwplot(Sepal.Length~ factor(Species) , data=iris,
xlab="Species",
col="red",
pch=16,
main=("Sepal.Lengthby Species"))
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
"!is.na(c(3, 5, NA, 10))"
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
reset()
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
skip()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
script_results_identical('result1'); multi_expr_creates_var('result1')
View(result3)
skip()
View(result3)
script_results_identical('result3'); multi_expr_creates_var('result3')
skip()
submit()
View(result3)
cran %>%
select() %>%
print
skip()
script_vals_identical()
skip()
skip()
arrange()
skip()
histogram(~disp| factor(cyl), data=mtcars,
main="Displacement by Cylinders",
xlab="Displacment(cu in)",
col="blue")
load("D:/Data Scientist/Exploratory Data Analysis/.RData")
library(datasets)
plot(iris$Sepal.Length, iris$Petal.Length,
col=iris$Species,
pch=16,
cex=0.5,
xlab="Sepal Length",
ylab="Petal Length",
main="Flower Characteristics in Iris")
legend(x=4.2, y=7, legend=levels(iris$Species),col=c(1:3), pch=16)
```
library (swirl)
install_from_swirl("Statistical Inference")
swirl()
11/12
deck
52
4/52
0
3/13
2/51
.64
.64
mypdf
integrate(mypdf,0,1.6)
1.414214
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
3.5
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-edh^2
omnitest(correctExpr='sd(apply(matrix(rnorm(10000),1000),1,mean))')
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
0.94208
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
qnorm(.10)
0
qnorm(.975,mean=3,sd=2)
6.92
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50)
.53
.53
ppois(3,2.5 * 4)
pbinom(5,1000,.01)
ppois(5,1000*.01)
n=10
coinPlot(10)
coinPlot(10000)
qnorm(.95)
omnitest(correctExpr='.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)')
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar
ACCompar(20)
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
myplot
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- 7*15.34^2 + 20*18.23^2
ns <- 8+21-2
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1
2
.8
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(2.5, 15, lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,5,lower.tail=FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 2 , sd=4, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 100 , sd=200, type = "one.sample",  alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 100 , sd=200, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample",  alt = "one.sided")$delta
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
24/500
"table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)"
"table(p.adjust(pValues2,method=\"BH\") < 0.05, trueStatus)"
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
p.adjust
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts,group)
obs
mean(Bdata$count)-mean(Cdata$count)
sample(group)
"perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))"
mean(perms>obs)
mean(perms>obs)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts,
| sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
installed.packages("shiny")
install.packages("rCharts")
install.packages("rCharts")
install.packages("rCharts")
library(rCharts)
install_github('rCharts', 'ramnathv')
install.packages('rCharts', 'ramnathv')
install.packages("rcharts")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install.packages("shinyapps")
library(devtools)
install_github('ramnathv/rCharts')
install_github('ramnathv/rCharts')
library(devtools)
install_github('ramnathv/rCharts')
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
install.packages("slidifyLibraries")
library(devtools)
install_github('ramnathv/slidifyLibraries')
install_github('slidifyLibraries', 'ramnathv')
library(devtools)
install_github('ramnathv/slidifyLibraries')
install_github('ramnathv/slidify')
install.packages("slidify")
library(devtools)
install_github('ramnathv/slidify')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
sessionInfo()
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify")
install_github('ramnathv/slidify')
install_github(ramnathv/slidify)
build("D:/Data Scientist/Developing Data Products/Installer/slidifyLibraries/", binary=FALSE)
R CMD INSTALL slidifyLibraries -l "C:\Users\PATIHE\Documents\R\win-library\3.2"
INSTALL slidifyLibraries -l "C:\Users\PATIHE\Documents\R\win-library\3.2"
type = "source"?
type = "source"
type = "source" ?
devtools::session_info():
devtools::session_info()
install.packages('stringr')
devtools::install_github('muschellij2/slidify')
install_github('ramnathv/slidifyLibraries')
install.packages("devtools")
library("devtools")
install_github("ropensci/plotly")
install.packages("plotly")
library (plotly)
library("devtools")
install_github("ropensci/plotly")
library(plotly)
setwd("D:\\Data Scientist\\Developing Data Products\\Project")
getwd()
shiny::runApp()
shiny::runApp()
data(package = .packages(all.available = TRUE))
library(MASS)
data(mtcars)
data(mcycle)
data(cars)
shiny::runApp()
data(phones)
phones
cars
mtcars
mcycle
shiny::runApp()
shiny::runApp()
Cars93
cars
data(ChickWeight)
ChickWeight
data(crimtab)
crimtab
data(sunspots)
sunspots
data(ldeaths)
data(WorldPhones)
WorldPhones
data(WWWusage)
WWWusage
data(airquality)
airquality
data(crimtab)
crimtab
data(discoveries)
discoveries
data(euro)
euro
cars
data(fdeaths)
data(fdeaths (UKLungDeaths))
data(Animals)
Animals
shiny::runApp()
Aids2
shiny::runApp()
data(petrol)
petrol
Animals
diamonds
data(diamonds)
data(painters)
painters
data(oats)
oats
shiny::runApp()
data(quine)
quine
data(uspop)
uspop
data(CO2)
co2
EuStockMarkets
AirPassengers
BJsales
BOD
shiny::runApp()
CO2
DNase
shiny::runApp()
Formaldehyde
HairEyeColor
Harman23.cor
Harman74.cor
Indometh
shiny::runApp()
cars
InsectSprays
shiny::runApp()
JohnsonJohnson
LakeHuron
LifeCycleSavings
Loblolly
OrchardSprays
shiny::runApp()
Nile
airquality
chickwts
discoveries
esoph
faithful
shiny::runApp()
freeny
lh
morley
shiny::runApp()
nhtemp
nottem
npk
occupationalStatus
precip
pressure
shiny::runApp()
sleep
trees
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
